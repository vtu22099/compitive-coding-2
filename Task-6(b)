//RAdix sort
import java.util.Arrays;

public class RadixSort {

    // Main radix sort function
    public static void radixSort(int[] arr) {
        if (arr.length == 0) return;

        // Step 1: Find the maximum number to know number of digits
        int max = getMax(arr);

        // Step 2: Apply counting sort for each digit (exp = 1, 10, 100, ...)
        for (int exp = 1; max / exp > 0; exp *= 10) {
            countingSortByDigit(arr, exp);
        }
    }

    // Utility to get maximum value in array
    private static int getMax(int[] arr) {
        int max = arr[0];
        for (int num : arr) {
            if (num > max) {
                max = num;
            }
        }
        return max;
    }

    // Counting sort based on digit represented by exp (1 = units, 10 = tens, etc.)
    private static void countingSortByDigit(int[] arr, int exp) {
        int n = arr.length;
        int[] output = new int[n];
        int[] count = new int[10]; // Digits 0â€“9

        // Count occurrences of each digit at current exp
        for (int i = 0; i < n; i++) {
            int digit = (arr[i] / exp) % 10;
            count[digit]++;
        }

        // Update count[] so that it contains actual positions
        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
        }

        // Build output array (must go from end to start for stability)
        for (int i = n - 1; i >= 0; i--) {
            int digit = (arr[i] / exp) % 10;
            output[count[digit] - 1] = arr[i];
            count[digit]--;
        }

        // Copy output back to arr[]
        for (int i = 0; i < n; i++) {
            arr[i] = output[i];
        }
    }

    // Example usage
    public static void main(String[] args) {
        int[] arr = {170, 45, 75, 90, 802, 24, 2, 66};
        System.out.println("Before sorting: " + Arrays.toString(arr));
        radixSort(arr);
        System.out.println("After sorting:  " + Arrays.toString(arr));
    }
}
